version: '3.8'

services:
  db:
    image: postgres:16.4-bullseye
    container_name: airbnb_postgres
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_HOST_PORT}:5432"
    networks:
      - airbnb_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5

  policies:
    container_name: airbnb_policies
    build:
      context: ./  # Adjust if necessary
      dockerfile: Dockerfile
    env_file:
      - .env
    command: >
      /bin/sh -c "
        echo 'Starting the server...' &&
        python manage.py runserver 0.0.0.0:8000
      "
    volumes:
      - ./airbnb_project:/app/airbnb_project
      - poetry-cache:/opt/.cache
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_NAME=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=${POSTGRES_HOST_PORT}
    depends_on: 
      db:
        condition: service_healthy
    networks:
      - airbnb_network

  listings:
    container_name: airbnb_listings
    build:
      context: ./  # Adjust if necessary
      dockerfile: Dockerfile
    env_file:
      - .env
    command: >
      /bin/sh -c "
        python manage.py makemigrations &&
        python manage.py migrate && 
        echo 'Starting the server...' &&
        python manage.py runserver 0.0.0.0:8001
      "
    volumes:
      - ./airbnb_project/listings:/app/airbnb_project/listings
      - poetry-cache:/opt/.cache
    ports:
      - "8001:8001"
    environment:
      - POSTGRES_NAME=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=${POSTGRES_HOST_PORT}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - airbnb_network

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - airbnb_network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
  celery:
    container_name: airbnb_celery
    build:
      context: ./  # Adjust if necessary
      dockerfile: Dockerfile
    env_file:
      - .env
    command: celery -A airbnb_project worker --loglevel=info
    volumes:
      - ./airbnb_project:/app/airbnb_project
      - poetry-cache:/opt/.cache
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - airbnb_network

volumes:
  pgdata:
    driver: local
  poetry-cache:
    driver: local

networks:
  airbnb_network:
    driver: bridge
